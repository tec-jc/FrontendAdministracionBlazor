@inherits LayoutComponentBase

@inject ILocalStorageService _localStorageService
@inject NavigationManager NavigationManager

<MudThemeProvider />
<MudDialogProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Administración</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Logout" Color="Color.Inherit" Edge="Edge.End" OnClick="@((e) => logout())" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu></NavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer Class="pa-4">
            @Body
        </MudContainer>

    </MudMainContent>
</MudLayout>
@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    async Task logout()
    {
        await _localStorageService.RemoveItemAsync("userId");
        await _localStorageService.RemoveItemAsync("token");
        NavigationManager.NavigateTo($"/", forceLoad: true);
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity != null)
        {
            if (user.Identity.IsAuthenticated)
            {
                var id = user.Claims.Where(c => c.Type == "unique_name").Select(c => c.Value).FirstOrDefault();
                await _localStorageService.SetItemAsync("userId", id);
            }
            else
            {
                NavigationManager.NavigateTo($"/");
            }
        }
    }
}